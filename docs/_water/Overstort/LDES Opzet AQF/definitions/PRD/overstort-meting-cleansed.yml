name: overstort-meting-cleansed
description: "Aquafin observations JSON message using HTTP input, OSLO transformation, and HTTP sending."
input:
  name: Ldio:HttpIn
  adapter:
    name: Ldio:JsonToLdAdapter
    config:
      context: |
        {
          "@context": {
            "@vocab": "https://aquafin.be/ns#",
            "@base": "https://aquafin.be/id/",
            "type": "@type"
            }
          }
        }
transformers:
  - name: Ldio:SparqlConstructTransformer
    config:
      query: |
        
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
        PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
        PREFIX prov: <http://www.w3.org/ns/prov#>
        PREFIX sosa: <http://www.w3.org/ns/sosa/>
        PREFIX ssn: <http://www.w3.org/ns/ssn/>
        PREFIX aquafin: <https://aquafin.be/ns#>
        PREFIX qudt: <http://qudt.org/schema/qudt/>
        PREFIX schema: <http://schema.org/>
        PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
        PREFIX time: <http://www.w3.org/2006/time#>

        CONSTRUCT {
          ?observationLevel a sosa:Observation ;
            sosa:phenomenonTime [
              a time:Instant ;
              time:inXSDDatetime ?measurement_timestamp_bind
            ] ;
            sosa:modifiedAt ?modified_at_bind ;
            sosa:hasFeatureOfInterest ?measurement_location_bind ;
            # aquafin: isAnomaly ?is_anomaly ;
            sosa:madeBySensor ?is_observed_with_bind ; 
            sosa:hasResult [
              a schema:QuantitativeValue, sosa:Result ;
                schema:unitCode qudt:milliMeter ;
                schema:unitText "millimeter"@nl ;
                schema:value ?level_dt
            ] ;
            sosa:observedProperty <https://data.vlaanderen.be/id/concept/spillLevel> .

          ?observationDebiet a sosa:Observation ;
            sosa:phenomenonTime [
              a time:Instant ;
              time:inXSDDatetime ?measurement_timestamp_bind
            ] ;
            sosa:modifiedAt ?modified_at_bind ;
            sosa:hasFeatureOfInterest ?measurement_location_bind ;
            # aquafin: isAnomaly ?is_anomaly ;
            sosa:madeBySensor ?is_observed_with_bind ; 
            sosa:hasResult [
              a schema:QuantitativeValue, sosa:Result ;
                schema:unitCode qudt:CubicMeterPerSecond ;
                schema:unitText "Kubieke meter per seconde"@nl ;
                schema:value ?spill_flow_dt
            ] ;
            sosa:observedProperty <https://data.omgeving.vlaanderen.be/id/concept/fysico-chemisch/0053> .

          ?observationTemperatuur a sosa:Observation ;
            sosa:phenomenonTime [ 
              a time:Instant ;
              time:inXSDDatetime ?measurement_timestamp_bind
            ] ;
            sosa:modifiedAt ?modified_at_bind ;
            sosa:hasFeatureOfInterest ?measurement_location_bind ;
            # aquafin: isAnomaly ?is_anomaly ;
            sosa:madeBySensor ?is_observed_with_bind ; 
            sosa:hasResult [
              a schema:QuantitaveValue, sosa:Result ;
                schema:unitCode qudt:DegreeCelsius ; 
                schema:unitText "graden Celsius"@nl ;
                schema:value ?temperature_dt 
            ] ;
            sosa:observedProperty <https://data.imjv.omgeving.vlaanderen.be/id/concept/parameter/t> .

        }
        WHERE {
          ?s aquafin:measurement_timestamp ?measurement_timestamp .
          ?s aquafin:modified_at ?modified_at .
          ?s aquafin:level ?level .
          ?s aquafin:temperature ?temperature .
          ?s aquafin:spill_flow ?spill_flow .
          ?s aquafin:measurement_location ?measurement_location .
          # ?s aquafin:is_anomaly ?is_anomaly .
          ?s aquafin:is_observed_with ?is_observed_with .
          ?s aquafin:load_timestamp_utc ?load_timestamp_utc .


  
          BIND(IRI(CONCAT("https://aquafin.be/id/observation/", STRUUID())) AS ?observationLevel)
          BIND(IRI(CONCAT("https://aquafin.be/id/observation/", STRUUID())) AS ?observationDebiet)
          BIND(IRI(CONCAT("https://aquafin.be/id/observation/", STRUUID())) AS ?observationTemperatuur)
          
          BIND(IRI(CONCAT("https://aquafin.be/id/meetpunt/", COALESCE(?measurement_location, "unknown"))) AS ?measurement_location_bind)
          BIND(IRI(CONCAT("https://aquafin.be/id/sensor/", COALESCE(?is_observed_with, "unknown"))) AS ?is_observed_with_bind)
            
          BIND(STRDT(?measurement_timestamp, xsd:dateTime) AS ?measurement_timestamp_bind)
          BIND(STRDT(?modified_at, xsd:datetime) AS ?modified_at_bind)
              
          BIND(STRDT(str(?level), xsd:decimal) as ?level_dt)
          BIND(STRDT(str(?spill_flow), xsd:decimal) as ?spill_flow_dt)
          BIND(STRDT(str(?temperature), xsd:decimal) as ?temperature_dt)
          }
  

  
outputs:
  - name: Ldio:ConsoleOut
    config:
      format: turtle
  - name: Ldio:HttpOut
    config:
      endpoint: http://prd-data-spaces-app-ldes-service:8080/ldes/overstort-meting-cleansed
      rdf-writer:
        content-type: application/n-triples
