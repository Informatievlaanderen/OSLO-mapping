name: observaties-pipeline-raw
description: "Aquafin observations JSON message using HTTP input, OSLO transformation, and HTTP sending."
input:
  name: Ldio:HttpIn
  adapter:
    name: Ldio:JsonToLdAdapter
    config:
      context: |
        {
          "@context": {
            "@vocab": "https://aquafin.be/ns#",
            "@base": "https://aquafin.be/id/",
            "type": "@type"
            }
          }
        }
transformers:
  - name: Ldio:SparqlConstructTransformer
    config:
      query: |
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
        PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
        PREFIX prov: <http://www.w3.org/ns/prov#>
        PREFIX sosa: <http://www.w3.org/ns/sosa/>
        PREFIX ssn: <http://www.w3.org/ns/ssn/>
        PREFIX aquafin: <https://aquafin.be/ns#>
        PREFIX qudt: <http://qudt.org/schema/qudt/>
        PREFIX schema: <http://schema.org/>

        CONSTRUCT {
          ?observation a sosa:Observation ;
            sosa:phenomenonTime ?measurement_timestamp ;
            # prov:generatedAtTime ?generatedTimeWithDataType ;  # Include generatedAtTime
            sosa:hasResultgemetenAfstand ?level ;
            sosa:hasResultdebiet ?spill_flow ; 
            sosa:hasResulttemperatuur ?temperature ;
            sosa:hasFeatureOfInterest ?measurement_location ;
            ssn:overstortstatus ?status ;
            aquafin:validationStatus ?validation_status ;
            sosa:madeBySensor ?is_observed_with .

           ?afstandResult a schema:QuantitativeValue ,sosa:Result ;
             qudt:numericValue ?level ;
             qudt:unit qudt:centiMeter .

          ?temperatuurResult a schema:QuantitativeValue ,sosa:Result ;
            qudt:numericValue ?temperature ;
            qudt:unit qudt:DegreeCelsius .

          ?debietResult a schema:QuantitativeValue, sosa:Result ;
            qudt:numericValue ?spill_flow ;
            qudt:unit qudt:CubicMeterPerSecond .
        }
        WHERE {
          ?s aquafin:measurement_timestamp ?phenomenonTime .
          # ?s aquafin:modifiedAt ?generatedTime .
          ?s aquafin:gemetenAfstand ?level .
          ?s aquafin:temperatuur ?temperature .
          ?s aquafin:debiet ?spill_flow .
          ?s aquafin:meetpunt ?meetpunt .
          ?s aquafin:validatieStatus ?validation_status .
          ?s aquafin:overstortstatus ?status .
          ?s aquafin:isWaargenomenMet ?sensorRaw .

          BIND(IRI(CONCAT("https://aquafin.be/id/observation/", STRUUID())) AS ?observation)

          BIND(IRI(CONCAT("https://aquafin.be/id/result/afstand/", STRUUID())) AS ?afstandResult)
          BIND(IRI(CONCAT("https://aquafin.be/id/result/temperatuur/", STRUUID())) AS ?temperatuurResult)
          BIND(IRI(CONCAT("https://aquafin.be/id/result/debiet/", STRUUID())) AS ?debietResult)
          
          BIND(IRI(CONCAT("https://aquafin.be/id/meetpunt/", COALESCE(?meetpunt, "unknown"))) AS ?measurement_location)
          BIND(IRI(CONCAT("https://aquafin.be/id/sensor/", COALESCE(?sensorRaw, "unknown"))) AS ?is_observed_with)
         
          # BIND(STRDT(?phenomenonTime, xsd:dateTime) AS ?measurement_timestampwithDataType)
          # BIND(STRDT(?generatedTime, xsd:datetime) AS ?GeneratedTimewithDataType)

          # Directly cast values to xsd:dateTime (removing the unnecessary renaming)
          BIND(xsd:dateTime(?phenomenonTime) AS ?measurement_timestamp)
          # BIND(xsd:dateTime(?generatedTime) AS ?generatedTimeWithDataType)  # Cast to xsd:dateTime


        }
outputs:
  - name: Ldio:ConsoleOut
    config:
      format: turtle
  - name: Ldio:HttpOut
    config:
      endpoint: http://ldes-server/ldes/observation
      rdf-writer:
        content-type: application/n-triples
